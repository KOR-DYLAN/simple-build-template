# Set Basic Env
ifeq ($(CONFIG_AARCH64),y)
    COMPILER_SPECIFIC_CFLAGS    :=--target=aarch64-arm-none-eabi
else ifeq ($(CONFIG_AARCH32),y)
    COMPILER_SPECIFIC_CFLAGS    :=--target=arm-arm-none-eabi
else
    $(error "no target architecture given...")
endif

ifneq ($(CONFIG_ARMLMD_LICENSE_FILE),)
    export ARMLMD_LICENSE_FILE=$(CONFIG_ARMLMD_LICENSE_FILE)
endif
SCATTER_LOADER	:=y
EXE_EXT			:=axf

# Set Toolchain
ifneq ($(CONFIG_ARMCLANG_ROOT_PATH),)
    AS      :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/armclang $(COMPILER_SPECIFIC_CFLAGS)
    CC      :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/armclang $(COMPILER_SPECIFIC_CFLAGS)
    AR      :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/armar
    LD      :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/armlink
    CPP     :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/armclang $(COMPILER_SPECIFIC_CFLAGS)
    FROMELF :=$(CONFIG_ARMCLANG_ROOT_PATH)/bin/fromelf
else
    AS      :=armclang $(COMPILER_SPECIFIC_CFLAGS)
    CC      :=armclang $(COMPILER_SPECIFIC_CFLAGS)
    AR      :=armar
    LD      :=armlink
    CPP     :=armclang $(COMPILER_SPECIFIC_CFLAGS)
    FROMELF :=fromelf
endif

# Insert 'ARM_LINK' symbol
cflags-y                        +=-DUSE_ARM_LINK

# Common ASM/C Compiler Options
cflags-$(CONFIG_BAREMETAL)		+=-fno-common
cflags-$(CONFIG_BAREMETAL)		+=-ffunction-sections
cflags-$(CONFIG_BAREMETAL)		+=-fdata-sections

# Do not use jump tables for switch statements even where it would be more efficient than other code generation strategies.
cflags-$(CONFIG_NO_JUMP_TABLES)		+=-fno-jump-tables

# the built-in function function is disabled.
cflags-$(CONFIG_NO_BUILTIN)			+=-fno-builtin

# no floating-point or Advanced SIMD registers
cflags-$(CONFIG_GENERAL_REGS_ONLY)	+=-mgeneral-regs-only

# Indicates that the compiler should not assume that unaligned memory references are handled by the system.
cflags-$(CONFIG_STRICT_ALIGN)		+=-mstrict-align

# Baremetal Environment
cflags-$(CONFIG_BAREMETAL)		+=-ffreestanding
#ldflags-$(CONFIG_BAREMETAL)		+=-z noexecstack
# ldflags-$(CONFIG_BAREMETAL)		+=--diag_error=warning
ldflags-$(CONFIG_BAREMETAL)		+=--remove --info=sizes,unused,unusedsymbols
#ldflags-$(CONFIG_BAREMETAL)		+=-Wl,--sort-section=alignment
#ldflags-$(CONFIG_BAREMETAL)		+=-Wl,-z,common-page-size=4096
#ldflags-$(CONFIG_BAREMETAL)		+=-Wl,-z,max-page-size=4096
#ldflags-$(CONFIG_BAREMETAL)		+=-Wl,--build-id=none

# Determine the language standard.
ifneq ($(CONFIG_STD),)
    CFLAGS	+=-std=$(CONFIG_STD)
else
    CFLAGS	+=-std=gnu99
endif

# Specifies the architecture version and architectural extensions to use for this function.
ifneq ($(CONFIG_SYSTEM_ARCH),)
    CFLAGS  +=-march=$(CONFIG_SYSTEM_ARCH)
endif

# Specifies the core for which to tune the performance of this function.
ifneq ($(CONFIG_SYSTEM_CORE),)
    CFLAGS  +=-mtune=$(CONFIG_SYSTEM_CORE)
endif

# Build options according to build type
ifeq ($(BUILD_TYPE),debug)
    override CONFIG_ENABLE_ASSERTIONS=y
    CFLAGS	+=-O0 -g -DDEBUG=1
    LDFLAGS	+=--lto_level=O0
else ifeq ($(BUILD_TYPE),release)
    CONFIG_ENABLE_ASSERTIONS    ?=n
    CFLAGS	+=-O2 -DDEBUG=0
    LDFLAGS	+=--lto_level=O2
else
    $(error Unknown BUILD_TYPE...)
endif

# Platform
ifneq ($(CONFIG_PLATFORM),)
    CFLAGS		+=-Iplatform/$(CONFIG_PLATFORM)
    CPPFLAGS	+=-Iplatform/$(CONFIG_PLATFORM)
endif

include script/Makefile.stack_protector
